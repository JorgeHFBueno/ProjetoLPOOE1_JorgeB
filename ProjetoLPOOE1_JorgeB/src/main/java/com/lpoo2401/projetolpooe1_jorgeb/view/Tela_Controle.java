package com.lpoo2401.projetolpooe1_jorgeb.view;

import com.lpoo2401.projetolpooe1_jorgeb.model.Caminhao;
import com.lpoo2401.projetolpooe1_jorgeb.model.Motoristas;
import com.lpoo2401.projetolpooe1_jorgeb.model.Obra;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;

//@author JRG B
public class Tela_Controle extends javax.swing.JFrame {

    private EntityManagerFactory emf;
    private Tela_Inicial parentFrame;
    
    public Tela_Controle(Tela_Inicial parentFrame) {
        initComponents();
        emf = Persistence.createEntityManagerFactory("pu_db_ProjetoLPOOE1_JorgeB");
        jComboBox_Controle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Obra", "Motoristas", "Caminhao"}));
        attList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox_Controle = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButton_Att = new javax.swing.JButton();
        jButton_Add = new javax.swing.JButton();
        jButton_Edit = new javax.swing.JButton();
        jButton_Del = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox_Controle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_Controle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_ControleActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jButton_Att.setText("Atualiza");
        jButton_Att.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AttActionPerformed(evt);
            }
        });

        jButton_Add.setText("Novo");
        jButton_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddActionPerformed(evt);
            }
        });

        jButton_Edit.setText("Editar");
        jButton_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EditActionPerformed(evt);
            }
        });

        jButton_Del.setText("Deletar");
        jButton_Del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton_Add)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Edit)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Del))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox_Controle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Att)))
                        .addGap(0, 209, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_Controle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Att))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Add)
                    .addComponent(jButton_Edit)
                    .addComponent(jButton_Del))
                .addContainerGap(77, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_AttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AttActionPerformed
        attList();
    }//GEN-LAST:event_jButton_AttActionPerformed

    private void jButton_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddActionPerformed
        String selectedEntity = (String) jComboBox_Controle.getSelectedItem();
        if (selectedEntity != null) {
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();

            try {
                switch (selectedEntity) {
                    case "Obra":
                        Tela_CObra addObraForm = new Tela_CObra(emf, this);
                        addObraForm.setVisible(true);
                        break;

                    case "Motoristas":
                        Tela_CMotorista addForm = new Tela_CMotorista(emf, this);
                        addForm.setVisible(true);
                        break;

                    case "Caminhao":
                        Tela_CCaminhao addCaminhaoForm = new Tela_CCaminhao(emf, this);
                        addCaminhaoForm.setVisible(true);

                        break;
                }
                em.getTransaction().commit();
            } catch (Exception e) {
                em.getTransaction().rollback();
                JOptionPane.showMessageDialog(this, "Erro na tentativa de adicionar: " + e.getMessage());
            } finally {
                em.close();
            }

            attList();
        }
    }//GEN-LAST:event_jButton_AddActionPerformed

    private void jButton_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EditActionPerformed
        String selectedEntity = (String) jComboBox_Controle.getSelectedItem();
        String selectedValue = jList1.getSelectedValue();
        if (selectedEntity != null && selectedValue != null) {
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();

            try {
                switch (selectedEntity) {
                    case "Obra":
                        Integer obraId = Integer.parseInt(selectedValue.split(",")[0].split(":")[1].trim());
                        Obra obra = em.find(Obra.class, obraId);

                        Tela_CObra editObraForm = new Tela_CObra(emf, obra, this);
                        editObraForm.setVisible(true);
                        break;

                    case "Motoristas":
                        Integer motoristaCpf = Integer.parseInt(selectedValue.split(",")[0].split(":")[1].trim());
                        Motoristas motorista = em.find(Motoristas.class, motoristaCpf);
                        em.close();

                        Tela_CMotorista editForm = new Tela_CMotorista(emf, motorista, this);
                        editForm.setVisible(true);
                        break;

                    case "Caminhao":
                        String caminhaoPlaca = selectedValue.split(",")[0].split(":")[1].trim();
                        Caminhao caminhao = em.find(Caminhao.class, caminhaoPlaca);

                        Tela_CCaminhao editTela_CCaminhao = new Tela_CCaminhao(emf, caminhao, this);
                        editTela_CCaminhao.setVisible(true);
                        break;
                }
                em.getTransaction().commit();
            } catch (Exception e) {
                em.getTransaction().rollback();
                JOptionPane.showMessageDialog(this, "Erro na tentativa de editar: " + e.getMessage());
            } finally {
                em.close();
            }

            attList();
        }
    }//GEN-LAST:event_jButton_EditActionPerformed

    private void jButton_DelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DelActionPerformed
        String selectedEntity = (String) jComboBox_Controle.getSelectedItem();
        String selectedValue = jList1.getSelectedValue();
        if (selectedEntity != null && selectedValue != null) {
            int confirm = JOptionPane.showConfirmDialog(this, "Tem Certeza que quer deletar?", "Confirmar Exclusao", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                EntityManager em = emf.createEntityManager();
                em.getTransaction().begin();

                try {
                    switch (selectedEntity) {
                        case "Obra":
                            Integer obraId = Integer.parseInt(selectedValue.split(",")[0].split(":")[1].trim());
                            Obra obra = em.find(Obra.class, obraId);
                            em.remove(obra);
                            break;

                        case "Motoristas":
                            Integer motoristaCpf = Integer.parseInt(selectedValue.split(",")[0].split(":")[1].trim());
                            Motoristas motorista = em.find(Motoristas.class, motoristaCpf);
                            em.remove(motorista);
                            break;

                        case "Caminhao":
                            String caminhaoPlaca = selectedValue.split(",")[0].split(":")[1].trim();
                            Caminhao caminhao = em.find(Caminhao.class, caminhaoPlaca);
                            em.remove(caminhao);
                            break;
                    }
                    em.getTransaction().commit();
                } catch (Exception e) {
                    em.getTransaction().rollback();
                    JOptionPane.showMessageDialog(this, "Erro na tentativa de deletar: " + e.getMessage());
                } finally {
                    em.close();
                }

                attList();
            }
        }
    }//GEN-LAST:event_jButton_DelActionPerformed

    private void jComboBox_ControleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_ControleActionPerformed
        attList();
    }//GEN-LAST:event_jComboBox_ControleActionPerformed

    void attList() {
        String selectedEntity = (String) jComboBox_Controle.getSelectedItem();

        if (selectedEntity != null) {
            EntityManager em = emf.createEntityManager();
            List<String> data = null;

            switch (selectedEntity) {
                case "Obra":
                    data = em.createQuery("SELECT o FROM Obra o", Obra.class)
                            .getResultList()
                            .stream()
                            .map(obra -> "ID: " + obra.getId() + ", Local: " + obra.getLocal()
                            + ", Caminhoes: " + obra.getCaminhao().stream().map(Caminhao::getPlaca).toList())
                            .toList();
                    break;

                case "Motoristas":
                    data = em.createQuery("SELECT m FROM Motoristas m", Motoristas.class)
                            .getResultList()
                            .stream()
                            .map(motorista -> "CPF: " + motorista.getCPF() + ", Nome: " + motorista.getNome()
                            + ", Celular: " + motorista.getNumero_celular()
                            + ", Caminhao: " + (motorista.getCaminhao() != null ? motorista.getCaminhao().getPlaca() : "None"))
                            .toList();
                    break;

                case "Caminhao":
                    data = em.createQuery("SELECT c FROM Caminhao c", Caminhao.class)
                            .getResultList()
                            .stream()
                            .map(caminhao -> "Placa: " + caminhao.getPlaca() + ", KM: " + caminhao.getKm()
                            + ", Obra: " + (caminhao.getObra() != null ? caminhao.getObra().getLocal() : "None")
                            + ", Motoristas: " + caminhao.getMotoristas().stream().map(Motoristas::getNome).toList())
                            .toList();
                    break;
            }

            em.close();

            if (data != null) {
                jList1.setListData(data.toArray(new String[0]));
            }
        }
    }

    /*/**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela_Controle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela_Controle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela_Controle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela_Controle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela_Controle().setVisible(true);
            }
        }  );*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Add;
    private javax.swing.JButton jButton_Att;
    private javax.swing.JButton jButton_Del;
    private javax.swing.JButton jButton_Edit;
    private javax.swing.JComboBox<String> jComboBox_Controle;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
